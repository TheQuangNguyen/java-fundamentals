/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import javax.print.DocFlavor;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;

public class Library {

    // Write a method called roll that accepts an integer n and rolls a six-sided dice n times.
    // The method should return an array containing the values of the rolls.

    public static int[] roll(int n) {
        int[] arr = new int[n];

        for (int i = 0; i < arr.length; i++) {
            arr[i] = (int)((Math.random() * n) + 1);
        }
        return arr;
    }

    // Write a method called containsDuplicates that returns true or false depending on
    // whether the array contains duplicate values.

    // I use this resource to learn how to work with hashset
    // https://www.geeksforgeeks.org/hashset-in-java/

    public static boolean containsDuplicates(int[] arr) {
        HashSet<Integer> hashSet = new HashSet<>(arr.length);

        for (int number : arr) {
            if (!hashSet.add(number)) {
                return true;
            }
        }
        return false;
    }

    // Write a method that accepts an array of integers and calculates and
    // returns the average of all the values in the array.

    public static double calculateAverages(int[] arr) {
        if (arr.length == 0) {
            return 0.00d;
        }
        int sum = 0;

        for (int number: arr) {
            sum += number;
        }
        return (double)(sum) / (double)(arr.length);
    }


    // Given an array of arrays calculate the average value for each array and
    // return the array with the lowest average.

    public static double calculateLowestAverage2dArray(int[][] arr) {
        double lowestAverage = calculateAverages(arr[0]);

        for (int i = 1; i < arr.length; i++) {
            double currentAverage = calculateAverages(arr[i]);
             if (lowestAverage > currentAverage) {
                 lowestAverage = currentAverage;
             }
        }

        return lowestAverage;
    }


    // Iterate through all of the data to find the min and max values.
    // Use a HashSet of type Integer to keep track of all the unique temperatures seen.
    // Finally, iterate from the min temp to the max temp and create a String containing any temperature not seen during the month.
    // Return that String.

    public static String temperatureNotSeen(int[][] arr2D) {
        HashSet<Integer> seenTemperatures = new HashSet<>();
        int max = Integer.MIN_VALUE;
        int min = Integer.MAX_VALUE;
        String message = "";

        // Check which day has max and min temperatures and add all temp to hashset
        for (int[] week: arr2D) {
            for (int day: week) {
                if (day > max) {
                    max = day;
                } else if (day < min) {
                    min = day;
                }
                seenTemperatures.add(day);
            }
        }

        message += String.format("High: %d\n", max);
        message += String.format("Low: %d\n", min);

        // Checks which temperatures are not in the range between high and low
        for (int i = min; i <= max; i++) {
            if (!seenTemperatures.contains(i)) {
                message += String.format("Never saw temperature: %d\n", i);
            }
        }
        return message;
    }


    // Write a function called tally that accepts a List of Strings representing votes
    // and returns one string to show who got the most votes.

    public static String tally(List<String> votes) {
        HashMap<String, Integer> voteCount = new HashMap<>();

        // If there is no vote, return Nobody
        if (votes.size() == 0) {
            return "Nobody";
        }

        // Tally up the vote for each candidates and store it in voteCount
        for (String vote : votes) {
            if (voteCount.containsKey(vote)) {
                voteCount.replace(vote, voteCount.get(vote) + 1);
            } else {
                voteCount.put(vote, 1);
            }
        }

        int highestTally = 0;
        String currentWinner = "";

        // Check which person has the highest number of votes and store the name in currentWinner
        // If the number of votes are the same, concat the candidates to currentWinner.
        for (String vote : voteCount.keySet()) {
            if (voteCount.get(vote) > highestTally) {
                currentWinner = vote;
                highestTally = voteCount.get(vote);
            } else if (voteCount.get(vote) == highestTally) {
                currentWinner = currentWinner + ", " + vote;
            }
        }

        return currentWinner;
    }
}
